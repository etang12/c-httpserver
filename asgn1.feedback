"--> Running asgn1.test.01 (GET a zero sized file) ... SUCCESS!
--> Running asgn1.test.02 (GET a small text file) ... SUCCESS!
--> Running asgn1.test.03 (GET a small binary file (with __-- in the name)) ... SUCCESS!
--> Running asgn1.test.04 (GET a large text file) ... SUCCESS!
--> Running asgn1.test.05 (GET a large binary file) ... SUCCESS!
--> Running asgn1.test.06 (PUT a small text file) ... SUCCESS!
--> Running asgn1.test.07 (PUT a small binary file) ... SUCCESS!
--> Running asgn1.test.08 (PUT a large binary file) ... SUCCESS!
--> Running asgn1.test.09 (Test HEAD request for a proper response header with 200 (OK)) ... SUCCESS!
--> Running asgn1.test.10 (Test if PUT requests receive response code 201 (Created) in response header) ... SUCCESS!
--> Running asgn1.test.11 (Test for 400 error on bad resource (request-target) name) ... SUCCESS!
--> Running asgn1.test.13 (Test for 404 error for resource that doesn't exist) ... SUCCESS!
--> Running asgn1.test.14 (PUT a zero sized file) ... SUCCESS!
--> Running asgn1.test.15 (PUT a file with only null bytes in its contents) ... SUCCESS!
--> Running asgn1.test.16 (GET a file with only null bytes in its contents) ... SUCCESS!
--> Running asgn1.test.17 (Test GET request for a proper response header with 200 (OK)) ... SUCCESS!
--> Running asgn1.test.18 (Test if server can handle an invalid method (POST)) ... failure!
++++ First 200 characters of standard error for test asgn1.test.18 are: ++++
bash: line 5: 19916 Terminated              ./httpserver 8018

++++ end ++++
---- Test feedback ----
Send an invalid HTTP method (not allowed) to the server using curl's -X option. The message is properly formatted, except it it uses a POST method. Capture the response code with curl's --write-out "%{http_code}\n" option. Verify with grep.
---- end ----
--> Running asgn1.test.19 (Test if server can update files) ... SUCCESS!
--> Running asgn1.test.20 (Test for 400 error on bad resource (URI > 27 char)) ... SUCCESS!
--> Running asgn1.test.21 (Test for 403 error on resource without permission (PUT)) ... SUCCESS!
--> Running asgn1.test.22 (Test for 403 error on resource without permission (GET)) ... SUCCESS!
--> Running asgn1.test.23 (Test for 404 error for resource that doesn't exist) ... SUCCESS!
--> Running asgn1.test.24 (PUT request with delays throughout the message) ... failure!
++++ First 200 characters of standard error for test asgn1.test.24 are: ++++
Ncat: Idle timeout expired (2000 ms).
bash: line 8: 19964 Terminated              ./httpserver 8024

++++ end ++++
---- Test feedback ----
Create a binary file from /dev/urandom on the client side. Use printf to construct a PUT request.  Create the Content-Length header with printf """Content-Length: %s\r\n\r\n""" `stat -c "%s" <file>` where <file> is the name of binary file. Concatonate the request line, content-length header, and file contents and redirect (>) the output to another file. Send the request by redirecting (<) the file contents to ncat. Run ncat with the -d option which sends delays between each line transferred to the server as well as -i so that ncat terminates the connection.
---- end ----
"
