"--> Running asgn2.test.01 (GET a small binary file (with __-- in the name)) ... SUCCESS!
--> Running asgn2.test.02 (GET a large binary file) ... SUCCESS!
--> Running asgn2.test.03 (PUT a small binary file) ... SUCCESS!
--> Running asgn2.test.04 (PUT a large binary file) ... SUCCESS!
--> Running asgn2.test.05 (Test HEAD request for a proper response header with 200 (OK)) ... SUCCESS!
--> Running asgn2.test.06 (Test for 400 with a bad HTTP version (HTTP 1.0)) ... SUCCESS!
--> Running asgn2.test.07 (Test if server creates default number of threads) ... SUCCESS!
--> Running asgn2.test.08 (Test if server can read optional arguments in any order (examples from spec)) ... SUCCESS!
--> Running asgn2.test.09 (Test if server can handle multiple GET requests simultaneously) ... SUCCESS!
--> Running asgn2.test.10 (Test if server can handle a GET, HEAD, and PUT request simultaneously) ... SUCCESS!
--> Running asgn2.test.11 (Test if server can handle many requests greater than number of threads) ... SUCCESS!
--> Running asgn2.test.12 (Test if server can log a single valid request) ... SUCCESS!
--> Running asgn2.test.13 (Test if server truncates log files everytime it starts) ... SUCCESS!
--> Running asgn2.test.14 (Test if server can log many valid requests sent simultaneously) ... SUCCESS!
--> Running asgn2.test.15 (Test if server can log many valid and invalid requests (400) with multiple requests sent) ... SUCCESS!
--> Running asgn2.test.16 (Test if server can log many valid and invalid requests (400 and 404) with multiple requests sent) ... SUCCESS!
--> Running asgn2.test.17 (GET request to 'healthcheck' with no logging enabled (404 error)) ... SUCCESS!
--> Running asgn2.test.18 (GET request to 'healthcheck' with logging enabled) ... SUCCESS!
--> Running asgn2.test.19 (Test 403 error for a request to 'healthcheck' ) ... SUCCESS!
--> Running asgn2.test.20 (Test logging of many valid and invalid requests including a request to 'healthcheck' ) ... SUCCESS!
--> Running asgn2.test.21 (Test 403 error (PUT) for a request to 'healthcheck' ) ... SUCCESS!
--> Running asgn2.test.22 (Test 'healthcheck' value with only valid requests) ... SUCCESS!
--> Running asgn2.test.23 (Test 'healthcheck' value with only invalid requests) ... SUCCESS!
--> Running asgn2.test.24 (Test 'healthcheck' value with many valid requests) ... SUCCESS!
--> Running asgn2.test.25 (Test if a single GET request to 'healthcheck' is logged correctly) ... failure!
++++ First 200 characters of standard error for test asgn2.test.25 are: ++++
bash: line 13: 17727 Terminated              ./httpserver 8025 -l test25-req.log
diff: _testtmp/test-25-req-01.log: No such file or directory
diff: _testtmp/test-25-req-02.log: No such file or directo
++++ end ++++
---- Test feedback ----
Start the server with logging enabled (-l <log-file>). Create a small text file with a valid server-side name. Create a correctly formatted log entry using printf to create the header for the request line and redirect that to a <log-entry> file. The body of the a request to healthcheck should have 31 0a 32 as the body logged. Send 1 valid HEAD (-I) request and 1 invalid HEAD (-I) request using curl and use the & operator to run each command in parallel. The invalid request is for a file that does not exist. Use the keyword wait so that the script waits until all requests running in the background (&) are done. After all commands have finished, send a GET request to healthcheck (1\n2 body) using curl. After all contents of the files are logged use csplit to split up the entries in the log. Use the arguments --elide-empty-files <log-file> "/=/+1" "{*}". Verify the correctness with diff by comparing each output file to the <log-entry> created with printf.
---- end ----
--> Running asgn2.test.26 (Test if a single HEAD request is logged correctly) ... SUCCESS!
--> Running asgn2.test.27 (Test if server can handle multiple GET requests to the same resource simultaniously) ... SUCCESS!
--> Running asgn2.test.28 (Test if server can handle multiple requests much larger (15:1 ratio) than the number of threads) ... SUCCESS!
"
